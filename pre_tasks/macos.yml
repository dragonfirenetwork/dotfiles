---
# pre_tasks/macos.yml

# Ensure Xcode Command Line Tools are installed silently
- name: Ensure Xcode Command Line Tools are installed (macOS)
  block:
    - name: Check if Xcode CLT is installed
      stat:
        path: /Library/Developer/CommandLineTools
      register: clt_check
      tags:
        - pre_tasks

    - name: Trigger Xcode CLT installation prompt
      shell: xcode-select --install
      args:
        executable: /bin/bash
      when: not clt_check.stat.exists
      register: clt_install
      changed_when: clt_install.rc == 0
      tags:
        - pre_tasks

    - name: Wait for Xcode CLT installation to complete
      wait_for:
        path: /Library/Developer/CommandLineTools/usr/bin/git
        timeout: 600
      when: not clt_check.stat.exists
      tags:
        - pre_tasks

    - name: Verify Xcode Command Line Tools installation
      stat:
        path: /Library/Developer/CommandLineTools
      register: clt_verify
      tags:
        - pre_tasks

    - name: Fail if Xcode Command Line Tools installation failed
      fail:
        msg: "Xcode Command Line Tools installation failed."
      when: not clt_verify.stat.exists
      tags:
        - pre_tasks
  tags:
    - pre_tasks

# Detect Mac architecture (Intel vs. Apple Silicon)
- name: Detect Mac architecture
  command: uname -m
  register: mac_arch
  changed_when: false
  tags:
    - pre_tasks

# Homebrew tasks
- name: Homebrew configuration
  import_tasks: homebrew/main.yml
  tags:
    - pre_tasks
    - homebrew

# Source .zprofile to update PATH for current session
- name: Source .zprofile to update PATH
  shell: source "{{ ansible_env.HOME }}/.zprofile"
  args:
    executable: /bin/zsh
  tags:
    - pre_tasks

# Ensure Homebrew is up to date
- name: Ensure Homebrew is up to date
  shell: "{{ homebrew_prefix }}/bin/brew update"
  when: brew_check.stat.exists
  tags:
    - pre_tasks

# Ensure Homebrew directories have correct permissions
- name: Ensure Homebrew directories have correct permissions
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  loop:
    - "{{ homebrew_prefix }}"
    - "{{ homebrew_prefix }}/bin"
    - "{{ homebrew_prefix }}/etc"
    - "{{ homebrew_prefix }}/share"
  when: brew_check.stat.exists
  tags:
    - pre_tasks

# Install essential packages via Homebrew
- name: Install essential packages (macOS)
  homebrew:
    name:
      - autoconf
      - automake
      - wget
      - htop
      - btop
      - nmap
      - netcat
      - zoxide
      - ffmpeg
      - tree
      - jq
      - ripgrep
      - neofetch
      - gnupg
      - coreutils
      - findutils
      - git 
      - gnu-sed
      - gawk
      - watch
      - gnu-tar
    state: present
  tags:
    - pre_tasks
    - essentials

# Install Python packages via Homebrew
- name: Install Python packages (macOS)
  homebrew:
    name:
      - python@3.9
      - pipenv
      - virtualenv
    state: present
  tags:
    - pre_tasks
    - python

# Set Ansible Python interpreter to Homebrew's Python 3
- name: Ensure Python interpreter is set to Python 3
  set_fact:
    ansible_python_interpreter: "{{ homebrew_prefix }}/bin/python3"
  tags:
    - pre_tasks

# Install Docker Desktop via Homebrew Cask if Docker role is included
- name: Install Docker Desktop (macOS)
  homebrew_cask:
    name: docker
    state: present
  when: "'docker' in default_roles or 'docker' in run_roles"
  tags:
    - pre_tasks
    - docker_setup

# Check if .config exists, if not create it
- name: Ensure .config directory exists
  file:
    path: "{{ ansible_env.HOME }}/.config"
    state: directory
    mode: '0755'
  tags:
    - pre_tasks